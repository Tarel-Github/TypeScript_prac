npm init -y

package.json 파일에서 main과 test를 지우고

npm i -D typescript

src 폴더를 만들고 안에 index.ts 파일을 만들어고

tsconfig.json 파일을 생성 (이름 틀리면 안됌)

해당 파일 안에 다음을 작성
{
  "include": ["src"],        //src 폴더 안의 내용을 다 본다는 뜻
  "compilerOptions": {
    "outDir":"build",             //자바스크립트 파일이 생성될 위치
    "target": "ES6",             //어떤 버전의 JS로 TS를 컴파일 하고 싶은가
    "lib": ["ES6","DOM"],          //TS가 어디서 동작할지 지정, 브라우저를 위한 코드다 라는 뜻, 브라우저에서 돌릴게 아니라면 DOM을 뺀다.
    "allowJs": true,              //JS와 TS를 동시에 쓰겠다는 표현
    "esModuleInterop": true       //모듈 추가용
  }
}

이후 package.json의 scripts의 중괄호에  "build": "tsc" 를 추가

이후 npm run build를 입력하면 build 폴더에 js 파일이 추가 됌
이 파일은 TS파일을 JS로 바꿔주는 폴더
이후에 npm run build를 실행하면 build폴더에 js로 컴파일 된다.

버전은 대부분 ES6를 쓰지만 구버전 서버를 쓴다면 직접 버전을 바꿔줘야 한다.

이후 npm i -D ts-node를 설치, 노드몬도 설치해줄 수 있다.

스크립트 부분을 다음과 같이 수정
  "scripts": {
    "build": "tsc",
    "dev": "nodemon --exec ts-node src/index.ts",
    "start": "node build/index.js"
  },

이제 npm run dev로 index.ts를 실행한다.
이제 index 파일에다가 뭐든 적어서 실행해보자

/////////////////////////////////////////////////////
"lib": ["ES6","DOM"] 가 없으면 코드 작성할 때
document.~~ 나 local.~~, Math.~~ 등을 인식하지 못한다.
즉, TS에 JS의 기능을 넣어준다고 보면 된다.
